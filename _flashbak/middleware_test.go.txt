package rb_test

import (
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	rb "github.com/gohandle/rb"
	"github.com/gohandle/rb/rbgorilla"
	"github.com/gohandle/rb/rbtest"
	"github.com/gorilla/sessions"
)

type testSessCtx struct {
	w  http.ResponseWriter
	r  *http.Request
	sc rb.SessionCore
}

func (c testSessCtx) Session(o ...rb.SessionOption) rb.Session {
	return c.sc.Session(c.w, c.r)
}

func TestFlashMiddleware(t *testing.T) {
	sc := rb.NewSessionCore(rbgorilla.AdaptSessionStore(
		sessions.NewCookieStore(make([]byte, 32)),
	))

	w1, r1 := httptest.NewRecorder(), httptest.NewRequest("GET", "/", nil)
	t.Run("set flashes", func(t *testing.T) {
		rb.NewFlashMiddleware(sc)(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			c := testSessCtx{w, r, sc}
			rb.Flash(c, "foo")
			rb.Flash(c, "bar", "rab")

		})).ServeHTTP(w1, r1)

		fmt.Println(w1.Header())

		s := rbtest.ReadSession(t, sc, rb.DefaultCookieName, w1.Header().Get("Set-Cookie"))

		fmt.Println(s.Get(rb.FlashSessionField))

		// fmt.Println(w1.Header())

	})

	// t.Run("read flashes", func(t *testing.T) {
	// 	w2, r2 := httptest.NewRecorder(), httptest.NewRequest("GET", "/", nil)
	// 	r2.Header.Set("Cookie", w1.Header().Get("Set-Cookie"))

	// 	rb.NewFlashMiddleware(sc)(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	// 		fmt.Fprintf(w, "%s", rb.FlashMessages(r.Context()))
	// 	})).ServeHTTP(w2, r2)

	// 	if act := w2.Body.String(); act != `` {
	// 		t.Fatalf("got: %v", act)
	// 	}
	// })

}
